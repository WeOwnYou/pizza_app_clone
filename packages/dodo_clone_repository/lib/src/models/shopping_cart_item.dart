import 'package:equatable/equatable.dart';import 'package:local_storage_dodo_clone_api/local_storage_dodo_clone_api.dart'    as local_storage;import 'package:dodo_clone_repository/src/models/models.dart';import 'package:dodo_clone_api_client/dodo_clone_api_client.dart'    as dodo_clone_api_client;enum ProductType { bonus, regular, combo }class ShoppingCartItem extends Equatable {  final int id;  final int count;  // TODO(mes): следующие 2 поля можно убрать  final int productId;  final int sectionId;  final ProductType productType;  final String title;  final String description;  final String image;  final double price;  final double? bonusCoinsPrice;  final double? oldPrice;  final int offerId;  final int? crustId;  final List<int> ingredientsIDs;  final List<int> toppingsIDs;  double get total => price * count;  double get coinsSpent => (bonusCoinsPrice ?? 0) * count;  double? get oldTotal => oldPrice == null ? null : oldPrice! * count;  factory ShoppingCartItem.fromProduct({    required int count,    required double price,    required Product product,  }) {    return ShoppingCartItem(      count: count,      id: -1,      productId: product.id,      sectionId: product.sectionId,      title: product.title,      description: product.description,      image: product.image, // TODO(fix): fix or delete product from args price:      price: price,      offerId: product.selectedOfferId,      ingredientsIDs: product.ingredientsIDs,      toppingsIDs: product.toppingsIDs,      productType: ProductType.regular, //(combo)    );  }  factory ShoppingCartItem.fromBonuses({    required Offer offer,    required double coinsPrice,    required String imageUrl,  }) {    return ShoppingCartItem(      count: 1,      id: -1,      productId: offer.parentId,      sectionId: -1,      title: offer.name,      description: offer.descriptionFormatted(),      image: imageUrl,      price: 1,      bonusCoinsPrice: coinsPrice,      offerId: offer.id,      toppingsIDs: const [],      ingredientsIDs: const [],      productType: ProductType.bonus,    );  }  factory ShoppingCartItem.fromApiClient(      dodo_clone_api_client.ShoppingCartItem item) {    return ShoppingCartItem(      count: item.count,      id: item.id,      productId: item.productId,      sectionId: item.sectionId,      title: item.title,      description: item.description,      image: item.image,      price: item.price,      offerId: item.offerId,      ingredientsIDs: item.ingredientsIDs,      toppingsIDs: item.toppingsIDs,      productType: ProductType.regular, //(комбо)      bonusCoinsPrice: null,    );  }  factory ShoppingCartItem.fromLocalStorage(      local_storage.LocalStorageShoppingCartItem item, Product? serverProduct) {    late ProductType productType;    switch (item.productType) {      case local_storage.ProductType.bonus:        productType = ProductType.bonus;        break;      case local_storage.ProductType.regular:        productType = ProductType.regular;        break;      case local_storage.ProductType.combo:        productType = ProductType.combo;        break;    }    return ShoppingCartItem(      count: item.count,      id: item.id,      productId: item.productId,      sectionId: item.sectionId,      title: item.title,      description: item.description,      image: item.image,      price: item.price,      oldPrice:          (productType == ProductType.bonus || productType == ProductType.combo)              ? serverProduct?.offerPrice              : null,      bonusCoinsPrice: item.bonusCoinsPrice,      offerId: item.offerId,      ingredientsIDs: item.ingredientsIDs,      toppingsIDs: item.toppingsIDs,      productType: productType,    );  }  local_storage.LocalStorageShoppingCartItem toLocalStorage() {    late local_storage.ProductType productType;    switch (this.productType) {      case ProductType.bonus:        productType = local_storage.ProductType.bonus;        break;      case ProductType.regular:        productType = local_storage.ProductType.regular;        break;      case ProductType.combo:        productType = local_storage.ProductType.combo;        break;    }    return local_storage.LocalStorageShoppingCartItem(      count: count,      id: id,      productId: productId,      sectionId: sectionId,      title: title,      description: description,      image: image,      price: price,      offerId: offerId,      ingredientsIDs: ingredientsIDs,      toppingsIDs: toppingsIDs,      bonusCoinsPrice: bonusCoinsPrice,      productType: productType,    );  }  @override  List<Object?> get props => [        count,        productId,        sectionId,        title,        description,        offerId,        crustId,        ingredientsIDs,        toppingsIDs,        price,        productType,      ];  const ShoppingCartItem({    required this.id,    required this.count,    required this.productId,    required this.sectionId,    required this.title,    required this.description,    required this.image,    required this.price,    this.bonusCoinsPrice,    this.oldPrice,    required this.offerId,    this.crustId,    required this.productType,    required this.ingredientsIDs,    required this.toppingsIDs,  });  ShoppingCartItem copyWith({    int? id,    int? count,    int? productId,    int? sectionId,    String? title,    String? description,    String? image,    double? price,    double? bonusCoinsPrice,    int? offerId,    int? crustId,    List<int>? ingredientsIDs,    List<int>? toppingsIDs,    ProductType? productType,  }) {    return ShoppingCartItem(      id: id ?? this.id,      count: count ?? this.count,      productId: productId ?? this.productId,      sectionId: sectionId ?? this.sectionId,      title: title ?? this.title,      description: description ?? this.description,      image: image ?? this.image,      price: price ?? this.price,      offerId: offerId ?? this.offerId,      crustId: crustId ?? this.crustId,      ingredientsIDs: ingredientsIDs ?? this.ingredientsIDs,      toppingsIDs: toppingsIDs ?? this.toppingsIDs,      productType: productType ?? this.productType,      bonusCoinsPrice: bonusCoinsPrice ?? this.bonusCoinsPrice,    );  }}extension ItemsCount on List<ShoppingCartItem> {  int get productsCount {    var result = 0;    forEach((element) {      if (element.sectionId != 5) {        result += element.count;      }    });    return result;  }  int get saucesCount {    var result = 0;    forEach((element) {      if (element.sectionId == 5) {        result += element.count;      }    });    return result;  } // List<num> get getTotal { //   var productsPrice = 0.0; //   var saucesPrice = 0.0; //   for (final element in this) { //     element.product.categoryId == 5 //         ? saucesPrice += element.total //         : productsPrice += element.total; //   } //   return [productsPrice, saucesPrice]; // }  int get coinsSpent {    int coins = 0;    forEach((shoppingCartItem) {      coins += shoppingCartItem.coinsSpent.toInt();    });    return coins;  }  int get numberOfBonusesInCart {    int count = 0;    forEach((shoppingCartItem) {      if (shoppingCartItem.productType == ProductType.bonus) {        count += shoppingCartItem.count;      }    });    return count;  }}